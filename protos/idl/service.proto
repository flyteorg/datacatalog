syntax = "proto3";

package datacatalog;

import "flyteidl/core/literals.proto";

service DataCatalog {
    rpc CreateDataset (CreateDatasetRequest) returns (CreateDatasetResponse);
    rpc GetDataset (GetDatasetRequest) returns (GetDatasetResponse);
    rpc CreateArtifact (CreateArtifactRequest) returns (CreateArtifactResponse);
    rpc GetArtifact (GetArtifactRequest) returns (GetArtifactResponse);
    rpc AddTag (AddTagRequest) returns (AddTagResponse);
    rpc ListArtifacts (ListArtifactsRequest) returns (ListArtifactsResponse);
}

message CreateDatasetRequest {
    Dataset dataset = 1;
}

message CreateDatasetResponse {

}

message GetDatasetRequest {
    DatasetID dataset = 1;
}

message GetDatasetResponse {
    Dataset dataset = 1;
}

message GetArtifactRequest {
    DatasetID dataset = 1;

    oneof query_handle {
        string artifact_id = 2;
        string tag_name = 3;
    }
}

message GetArtifactResponse {
    Artifact artifact = 1;
}

message CreateArtifactRequest {
    Artifact artifact = 1;
}

message CreateArtifactResponse {

}

message AddTagRequest {
    Tag tag = 1;
}

message AddTagResponse {

}

message ListArtifactsRequest {
    DatasetID dataset = 1;
    FilterExpression filter = 2;
    PaginationOptions pagination = 3;
}

message ListArtifactsResponse {
    repeated Artifact artifacts = 1;
}

message Dataset {
    DatasetID id = 1;
    Metadata metadata = 2;
    repeated string partitionKeys = 3;
}

message Partition {
    string key = 1;
    string value = 2;
}

message DatasetID {
    string project = 1;  // The name of the project
    string name = 2;     // The name of the dataset
    string domain = 3;   // The domain (eg. environment)
    string version = 4;  // Version of the data schema
    string UUID = 5;     // UUID for the dataset (if set the above fields are optional)
}

message Artifact {
    string id = 1;
    DatasetID dataset = 2;
    repeated ArtifactData data = 3;
    Metadata metadata = 4;
    repeated Partition partitions = 5;
}

message ArtifactData {
    string name = 1;
    flyteidl.core.Literal value = 2;
}

message Tag {
    string name = 1;
    string artifact_id = 2;
    DatasetID dataset = 3;
}

message Metadata {
    map<string, string> key_map = 1; // key map is a dictionary of key/val strings that represent metadata
}

message FilterExpression {
    repeated SingleValueFilter filters = 1;
}

message SingleValueFilter {
    oneof entity {
        TagFilter tagFilter = 1;
        PartitionFilter partition_filter = 2;
        ArtifactFilter artifact_filter = 3;
        DatasetFilter dataset_filter = 4;
    }

    // as use-cases come up we can add more operators, ex: gte, like, not eq etc.
    enum ComparisonOperator {
        EQUALS = 0;
    }

    ComparisonOperator operator = 10; // field 10 in case we add more entities to query
    // Next field number: 11
}

message ArtifactFilter {
    oneof property {
        string artifact_id = 1;
    }
}

message TagFilter {
    oneof property {
        string tag_name = 1;
    }
}

message PartitionFilter {
    oneof property {
        KeyValuePair key_val = 1;
    }
}

message KeyValuePair {
    string key = 1;
    string value = 2;
}

message DatasetFilter {
    oneof property {
        string project = 1;
        string name = 2;
        string domain = 3;
        string version = 4;
    }
}

message PaginationOptions {
    int32 limit = 1;
    int32 offset = 2;
    string sortKey = 3;
    SortOrder order = 4;

    enum SortOrder {
        ASCENDING = 0;
        DESCENDING = 1;
    }
}
