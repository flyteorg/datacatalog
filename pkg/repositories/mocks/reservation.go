// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/datacatalog/pkg/repositories/models"

	time "time"
)

// ReservationRepo is an autogenerated mock type for the ReservationRepo type
type ReservationRepo struct {
	mock.Mock
}

type ReservationRepo_Create struct {
	*mock.Call
}

func (_m ReservationRepo_Create) Return(_a0 error) *ReservationRepo_Create {
	return &ReservationRepo_Create{Call: _m.Call.Return(_a0)}
}

func (_m *ReservationRepo) OnCreate(ctx context.Context, reservation models.Reservation, now time.Time) *ReservationRepo_Create {
	c := _m.On("Create", ctx, reservation, now)
	return &ReservationRepo_Create{Call: c}
}

func (_m *ReservationRepo) OnCreateMatch(matchers ...interface{}) *ReservationRepo_Create {
	c := _m.On("Create", matchers...)
	return &ReservationRepo_Create{Call: c}
}

// Create provides a mock function with given fields: ctx, reservation, now
func (_m *ReservationRepo) Create(ctx context.Context, reservation models.Reservation, now time.Time) error {
	ret := _m.Called(ctx, reservation, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Reservation, time.Time) error); ok {
		r0 = rf(ctx, reservation, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ReservationRepo_Delete struct {
	*mock.Call
}

func (_m ReservationRepo_Delete) Return(_a0 error) *ReservationRepo_Delete {
	return &ReservationRepo_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *ReservationRepo) OnDelete(ctx context.Context, reservation models.ReservationKey) *ReservationRepo_Delete {
	c := _m.On("Delete", ctx, reservation)
	return &ReservationRepo_Delete{Call: c}
}

func (_m *ReservationRepo) OnDeleteMatch(matchers ...interface{}) *ReservationRepo_Delete {
	c := _m.On("Delete", matchers...)
	return &ReservationRepo_Delete{Call: c}
}

// Delete provides a mock function with given fields: ctx, reservation
func (_m *ReservationRepo) Delete(ctx context.Context, reservation models.ReservationKey) error {
	ret := _m.Called(ctx, reservation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ReservationKey) error); ok {
		r0 = rf(ctx, reservation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type ReservationRepo_Get struct {
	*mock.Call
}

func (_m ReservationRepo_Get) Return(_a0 models.Reservation, _a1 error) *ReservationRepo_Get {
	return &ReservationRepo_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ReservationRepo) OnGet(ctx context.Context, reservationKey models.ReservationKey) *ReservationRepo_Get {
	c := _m.On("Get", ctx, reservationKey)
	return &ReservationRepo_Get{Call: c}
}

func (_m *ReservationRepo) OnGetMatch(matchers ...interface{}) *ReservationRepo_Get {
	c := _m.On("Get", matchers...)
	return &ReservationRepo_Get{Call: c}
}

// Get provides a mock function with given fields: ctx, reservationKey
func (_m *ReservationRepo) Get(ctx context.Context, reservationKey models.ReservationKey) (models.Reservation, error) {
	ret := _m.Called(ctx, reservationKey)

	var r0 models.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, models.ReservationKey) models.Reservation); ok {
		r0 = rf(ctx, reservationKey)
	} else {
		r0 = ret.Get(0).(models.Reservation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ReservationKey) error); ok {
		r1 = rf(ctx, reservationKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ReservationRepo_Update struct {
	*mock.Call
}

func (_m ReservationRepo_Update) Return(_a0 error) *ReservationRepo_Update {
	return &ReservationRepo_Update{Call: _m.Call.Return(_a0)}
}

func (_m *ReservationRepo) OnUpdate(ctx context.Context, reservation models.Reservation, now time.Time) *ReservationRepo_Update {
	c := _m.On("Update", ctx, reservation, now)
	return &ReservationRepo_Update{Call: c}
}

func (_m *ReservationRepo) OnUpdateMatch(matchers ...interface{}) *ReservationRepo_Update {
	c := _m.On("Update", matchers...)
	return &ReservationRepo_Update{Call: c}
}

// Update provides a mock function with given fields: ctx, reservation, now
func (_m *ReservationRepo) Update(ctx context.Context, reservation models.Reservation, now time.Time) error {
	ret := _m.Called(ctx, reservation, now)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Reservation, time.Time) error); ok {
		r0 = rf(ctx, reservation, now)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
