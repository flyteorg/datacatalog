// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/flyteorg/datacatalog/pkg/repositories/models"
)

// DatasetRepo is an autogenerated mock type for the DatasetRepo type
type DatasetRepo struct {
	mock.Mock
}

type DatasetRepo_Create struct {
	*mock.Call
}

func (_m DatasetRepo_Create) Return(_a0 error) *DatasetRepo_Create {
	return &DatasetRepo_Create{Call: _m.Call.Return(_a0)}
}

func (_m *DatasetRepo) OnCreate(ctx context.Context, in models.Dataset) *DatasetRepo_Create {
	c_call := _m.On("Create", ctx, in)
	return &DatasetRepo_Create{Call: c_call}
}

func (_m *DatasetRepo) OnCreateMatch(matchers ...interface{}) *DatasetRepo_Create {
	c_call := _m.On("Create", matchers...)
	return &DatasetRepo_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, in
func (_m *DatasetRepo) Create(ctx context.Context, in models.Dataset) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Dataset) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type DatasetRepo_Get struct {
	*mock.Call
}

func (_m DatasetRepo_Get) Return(_a0 models.Dataset, _a1 error) *DatasetRepo_Get {
	return &DatasetRepo_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatasetRepo) OnGet(ctx context.Context, in models.DatasetKey) *DatasetRepo_Get {
	c_call := _m.On("Get", ctx, in)
	return &DatasetRepo_Get{Call: c_call}
}

func (_m *DatasetRepo) OnGetMatch(matchers ...interface{}) *DatasetRepo_Get {
	c_call := _m.On("Get", matchers...)
	return &DatasetRepo_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, in
func (_m *DatasetRepo) Get(ctx context.Context, in models.DatasetKey) (models.Dataset, error) {
	ret := _m.Called(ctx, in)

	var r0 models.Dataset
	if rf, ok := ret.Get(0).(func(context.Context, models.DatasetKey) models.Dataset); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(models.Dataset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.DatasetKey) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatasetRepo_List struct {
	*mock.Call
}

func (_m DatasetRepo_List) Return(_a0 []models.Dataset, _a1 error) *DatasetRepo_List {
	return &DatasetRepo_List{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatasetRepo) OnList(ctx context.Context, in models.ListModelsInput) *DatasetRepo_List {
	c_call := _m.On("List", ctx, in)
	return &DatasetRepo_List{Call: c_call}
}

func (_m *DatasetRepo) OnListMatch(matchers ...interface{}) *DatasetRepo_List {
	c_call := _m.On("List", matchers...)
	return &DatasetRepo_List{Call: c_call}
}

// List provides a mock function with given fields: ctx, in
func (_m *DatasetRepo) List(ctx context.Context, in models.ListModelsInput) ([]models.Dataset, error) {
	ret := _m.Called(ctx, in)

	var r0 []models.Dataset
	if rf, ok := ret.Get(0).(func(context.Context, models.ListModelsInput) []models.Dataset); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.ListModelsInput) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
