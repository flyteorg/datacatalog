// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	datacatalog "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/datacatalog"

	mock "github.com/stretchr/testify/mock"
)

// DatasetManager is an autogenerated mock type for the DatasetManager type
type DatasetManager struct {
	mock.Mock
}

type DatasetManager_CreateDataset struct {
	*mock.Call
}

func (_m DatasetManager_CreateDataset) Return(_a0 *datacatalog.CreateDatasetResponse, _a1 error) *DatasetManager_CreateDataset {
	return &DatasetManager_CreateDataset{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatasetManager) OnCreateDataset(ctx context.Context, request *datacatalog.CreateDatasetRequest) *DatasetManager_CreateDataset {
	c_call := _m.On("CreateDataset", ctx, request)
	return &DatasetManager_CreateDataset{Call: c_call}
}

func (_m *DatasetManager) OnCreateDatasetMatch(matchers ...interface{}) *DatasetManager_CreateDataset {
	c_call := _m.On("CreateDataset", matchers...)
	return &DatasetManager_CreateDataset{Call: c_call}
}

// CreateDataset provides a mock function with given fields: ctx, request
func (_m *DatasetManager) CreateDataset(ctx context.Context, request *datacatalog.CreateDatasetRequest) (*datacatalog.CreateDatasetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *datacatalog.CreateDatasetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateDatasetRequest) *datacatalog.CreateDatasetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.CreateDatasetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.CreateDatasetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatasetManager_GetDataset struct {
	*mock.Call
}

func (_m DatasetManager_GetDataset) Return(_a0 *datacatalog.GetDatasetResponse, _a1 error) *DatasetManager_GetDataset {
	return &DatasetManager_GetDataset{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatasetManager) OnGetDataset(ctx context.Context, request *datacatalog.GetDatasetRequest) *DatasetManager_GetDataset {
	c_call := _m.On("GetDataset", ctx, request)
	return &DatasetManager_GetDataset{Call: c_call}
}

func (_m *DatasetManager) OnGetDatasetMatch(matchers ...interface{}) *DatasetManager_GetDataset {
	c_call := _m.On("GetDataset", matchers...)
	return &DatasetManager_GetDataset{Call: c_call}
}

// GetDataset provides a mock function with given fields: ctx, request
func (_m *DatasetManager) GetDataset(ctx context.Context, request *datacatalog.GetDatasetRequest) (*datacatalog.GetDatasetResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *datacatalog.GetDatasetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetDatasetRequest) *datacatalog.GetDatasetResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetDatasetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GetDatasetRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type DatasetManager_ListDatasets struct {
	*mock.Call
}

func (_m DatasetManager_ListDatasets) Return(_a0 *datacatalog.ListDatasetsResponse, _a1 error) *DatasetManager_ListDatasets {
	return &DatasetManager_ListDatasets{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *DatasetManager) OnListDatasets(ctx context.Context, request *datacatalog.ListDatasetsRequest) *DatasetManager_ListDatasets {
	c_call := _m.On("ListDatasets", ctx, request)
	return &DatasetManager_ListDatasets{Call: c_call}
}

func (_m *DatasetManager) OnListDatasetsMatch(matchers ...interface{}) *DatasetManager_ListDatasets {
	c_call := _m.On("ListDatasets", matchers...)
	return &DatasetManager_ListDatasets{Call: c_call}
}

// ListDatasets provides a mock function with given fields: ctx, request
func (_m *DatasetManager) ListDatasets(ctx context.Context, request *datacatalog.ListDatasetsRequest) (*datacatalog.ListDatasetsResponse, error) {
	ret := _m.Called(ctx, request)

	var r0 *datacatalog.ListDatasetsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.ListDatasetsRequest) *datacatalog.ListDatasetsResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.ListDatasetsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.ListDatasetsRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
